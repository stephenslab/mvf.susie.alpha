
#' @title Initialize a multsusie object
#'
#' @param L number of non zero coefficients An L-vector containing the indices of the
#'   nonzero coefficients.
#'
#' @param G_prior prior object defined by init_prior_multsusie function
#'
#' @param Y list of matrices of outcomes
#'
#' @param X Matrix of covariates
#' @pama type_mark an object generated by \code{\link{is.functional}} function
#'
#' @return A list with the following elements
#' \item{fitted_wc}{ list of length L, each element contains the fitted wavelet coefficients of effect l}
#' \item{fitted_wc2}{list of length L, each element contains the variance of the fitted wavelet coefficients of effect l}
#' \item{alpha_hist}{ history of the fitted alpha value}
#' \item{N}{ number of indidivual in the study}
#' \item{sigma2}{residual variance}
#' \item{n_wac}{number of wavelet coefficients}
#' \item{ind_fitted_func}{fitted curves of each individual }
#' \item{cs}{credible set}
#' \item{pip}{Posterior inclusion probabilites}
#' \item{G_prior}{a G_prior of the same class as the input G_prior, used for internal calculation}
#' \item{lBF}{ log Bayes factor for the different effect}
#' \item{KL}{ the KL divergence for the different effect}
#' \item{ELBO}{ The evidence lower bound}
#' \item{lfsr_wc}{Local fasle sign rate of the fitted wavelet coefficients}
#' @export
init_multsusie_obj <- function(L, G_prior, Y,X , type_mark)
{

  if(!is.null(Y$Y_f)){
  fitted_wc       <-  list()
  fitted_wc2      <-  list()
  n_wac           <-  lapply(lapply(Y$Y_f,dim) ,`[[`, 2)
  }else {
    fitted_wc       <-  NULL
    fitted_wc2      <-  NULL
    n_wac           <-  NULL
  }
  if(!is.null(Y$Y_u)){
    fitted_uni        <-   list()
    fitted_uni2       <-   list()
  }else{
    fitted_uni        <-   NULL
    fitted_uni2       <-   NULL
  }
  alpha           <-  list()
  alpha_hist      <-  list()
  ind_fitted_val  <-  list()
  cs              <-  list()
  pip             <-  rep(0, dim(X)[2])
  est_pi          <-  list()
  est_sd          <-  list()
  L               <-  L
  G_prior         <-  G_prior
  N               <-  nrow(X)[1]
  n_cond          <-  type_mark$ncond
  P               <-  ncol(X)[2]
  sigma2          <-  rep(1, length(Y))
  lBF             <-  list()
  KL              <-  rep(NA,L)
  ELBO            <-  c()
  for ( l in 1:L )
  {

    if(!is.null(Y$Y_f)){
      fitted_wc[[l]]        <-    lapply( 1:length(n_wac), function(j) rep( 0, n_wac[[j]]))
      fitted_wc2[[l]]       <-    lapply( 1:length(n_wac), function(j) rep( 0, n_wac[[j]]))
    }
    if(!is.null(Y$Y_u)){
      fitted_uni [[l]]       <-    rep(0, ncol(Y$Y_u))
      fitted_uni2[[l]]       <-    rep(0, ncol(Y$Y_u))
    }


    alpha [[l]]           <-  rep(0, dim(X)[2])
    cs[[l]]               <-  list()
    est_pi [[l]]          <-  get_pi_G_prior(G_prior)
    lBF[[l]]              <-  rep(NA, ncol(X))

  }



  obj <- list( fitted_wc       = fitted_wc,
               fitted_wc2      = fitted_wc2,
               fitted_uni      = fitted_uni,
               fitted_uni2     = fitted_uni2,
               lBF             = lBF,
               KL              = KL,
               ELBO            = ELBO,
               ind_fitted_val  =  ind_fitted_val,
               G_prior         = G_prior,
               alpha_hist      = alpha_hist,
               N               = N,
               n_wac           = n_wac,
               sigma2          = sigma2,
               P               = P,
               alpha           = alpha,
               cs              = cs,
               pip             = pip,
               est_pi          = est_pi,
               est_sd          = est_sd,
               L               = L)

  class(obj) <- "multsusie"
  return(obj)
}




#' @rdname get_pi
#'
#' @method get_pi mvfsusie
#'
#' @export get_pi.mvfsusie
#'
#' @export
#'
get_pi.multsusie <- function(multfsusie.obj, l, ...)
{

  if( l >  length(multfsusie.obj$est_pi))
  {
    stop("Error trying to access mixture proportion")
  }
  if( l < 1)
  {
    stop("Error l should be larger ")
  }
  out <- multfsusie.obj$est_pi[[l]]
  return(out)
}

